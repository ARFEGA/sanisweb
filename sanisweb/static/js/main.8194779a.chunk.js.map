{"version":3,"sources":["components/auth/Login.js","REDUX/store.js","components/LAYOUT/Spinner.js","HELPERS/auth.js","components/Clinica.js","components/Profesionales.js","components/Servicios.js","components/LAYOUT/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","email","password","leerDatos","e","setState","target","name","value","validar","preventDefault","props","firebase","login","then","result","console","log","catch","error","className","class","onSubmit","this","method","data-netlify","type","htmlFor","id","required","onChange","aria-describedby","Component","firebaseConnect","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","store","compose","reactReduxFirebase","userProfile","useFirestoreForProfile","reduxFirestore","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","firestore","firestoreReducer","window","__REDUX_DEVTOOLS_EXTENSION__","Spinner","locationHelper","locationHelperBuilder","UserIsAuthenticated","createHistory","connectedRouterRedirect","wrapperDisplayName","AuthenticatingComponent","allowRedirectBack","redirectPath","ownProps","getRedirectQueryParam","authenticatingSelector","auth","isInitializing","profile","isLoaded","authenticatedSelector","isEmpty","UserIsNotAuthenticated","Clinica","Profesionales","Servicios","Navbar","autenticado","cerrarSesion","logout","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","href","onClick","uid","firestoreConnect","connect","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8194779a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport  { firebaseConnect }  from 'react-redux-firebase'\nclass Login extends Component {\n    state = {\n        email: '',\n        password: ''\n    }\n    leerDatos = e =>{\n        this.setState({\n            [e.target.name]:e.target.value\n        })\n    }\n\n    validar = e =>{\n        e.preventDefault();\n        const { firebase } = this.props;\n        firebase.login({\n            email:this.state.email,\n            password:this.state.password\n        }).then(result =>{\n            console.log(result)\n        }).catch(error =>{\n            console.log(error)\n        })\n    }\n\n    render() { \n    \n        return (\n        <div className=\"container\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-lg-6 m-1\">\n                    <div class=\"card border-primary my-3\">\n                        <div class=\"card-header text-center\"><i className=\"fas fa-lock\"></i> LOGIN</div>\n                            <div class=\"card-body\">\n                                <form name=\"login\" onSubmit={this.validar} method=\"post\" data-netlify=\"true\">\n                                    {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n                                    <input type=\"hidden\" name=\"form-name\" value=\"login\" />\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\"><span className=\"font-weight-bold\">E-mail: </span></label>\n                                        <input \n                                            type=\"text\" \n                                            id=\"email\" \n                                            className=\"form-control\"\n                                            required\n                                            onChange={this.leerDatos} \n                                            aria-describedby=\"ayuda-email\"\n                                            name=\"email\" />\n                                        <small className=\"form-text text-mute\" id=\"ayuda-email\">Introduce tu e-mail asociado a tu cuenta.</small>\n                                        \n                                        <label htmlFor=\"password\"><span className=\"font-weight-bold\">Contraseña: </span></label>\n                                        <input \n                                            type=\"password\" \n                                            id=\"password\" \n                                            className=\"form-control\" \n                                            name=\"password\" \n                                            required\n                                            onChange={this.leerDatos} \n                                            aria-describedby=\"ayuda-contraseña\"/>\n                                        <small className=\"form-text text-mute\" id=\"ayuda-contraseña\">Mínimo 6 caracteres.</small>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <input  type=\"Submit\" className=\"bn btn-primary btn-block\" value=\"Login\"/>\n                                    </div>\n                                </form>\n                            </div>\n                    </div>\n            \n                    </div>\n            </div>\n        </div> );\n    }\n}\n \nexport default firebaseConnect()(Login);","//EN PRIMER LUGAR INSTALAR LAS SIGUIENTES DEPENDENCIAS:\n//Algunas son del github:\n//https://github.com/prescottprue/react-redux-firebase\n//sudo npm install--save firebase react - redux@5 react - redux - firebase@2 redux redux - firestore\n\nimport { createStore, combineReducers, compose } from 'redux'\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase'\nimport { reduxFirestore, firestoreReducer } from 'redux-firestore'\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n//Necesário para poder hacer login en firebase\nimport 'firebase/auth';\n//Reducers personalizados\n//import buscarUsuarioReducer from './reducers/buscarSuscriptorReducer';\n//Configuracion firebase\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC9GRecCkYhhsAltVlezf_A5-4X9i2cA2E\",\n    authDomain: \"web-sanis.firebaseapp.com\",\n    databaseURL: \"https://web-sanis.firebaseio.com\",\n    projectId: \"web-sanis\",\n    storageBucket: \"web-sanis.appspot.com\",\n    messagingSenderId: \"432959032751\",\n    appId: \"1:432959032751:web:d44352e348bc8d66ed735a\",\n    measurementId: \"G-VMSP6LZCB4\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\n// react-redux-firebase config\nconst rrfConfig = {\n    userProfile: 'users',\n    useFirestoreForProfile: true // Firestore for Profile instead of Realtime DB\n}\n\n//Crear el enhacer con compose de redux y firestore\nconst createStoreWithFirebase = compose(\n    reactReduxFirebase(firebase, rrfConfig),\n    reduxFirestore(firebase)\n)(createStore);\n\n// Add firebase to reducers\nconst rootReducer = combineReducers({\n    firebase: firebaseReducer,\n    firestore: firestoreReducer // <- needed if using firestore\n    //suscriptor: buscarUsuarioReducer\n})\n\n// Create store with reducers and initial state\nconst initialState = {}\nconst store = createStoreWithFirebase(rootReducer, initialState, compose(\n    reactReduxFirebase(firebase),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;","import React from 'react';\nimport '../../CSS/spinner.css'\n\nconst Spinner = () => {\n    return (\n        <div class=\"spinner\">\n            <div class=\"double-bounce1\"></div>\n            <div class=\"double-bounce2\"></div>\n        </div>\n      );\n}\n \nexport default Spinner;","import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect'\nimport createHistory from 'history/createBrowserHistory'\nimport Spinner from '../components/LAYOUT/Spinner';\n\n\nconst locationHelper = locationHelperBuilder({});\nconst history = createHistory()\n\nexport const UserIsAuthenticated = connectedRouterRedirect({\n    wrapperDisplayName: 'UserIsAuthenticated',\n    AuthenticatingComponent: Spinner,\n    allowRedirectBack: true,\n    redirectPath: (state, ownProps) =>\n        locationHelper.getRedirectQueryParam(ownProps) || '/login',\n    authenticatingSelector: ({ firebase: { auth, profile, isInitializing } }) =>\n        !auth.isLoaded || isInitializing === true,\n    authenticatedSelector: ({ firebase: { auth } }) =>\n        auth.isLoaded && !auth.isEmpty,\n    /*  redirectAction: newLoc => (dispatch) => {\n         browserHistory.replace(newLoc); // or routerActions.replace\n         dispatch({ type: 'UNAUTHED_REDIRECT' });\n     }, */\n});\n\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n    wrapperDisplayName: 'UserIsNotAuthenticated',\n    AuthenticatingComponent: Spinner,\n    allowRedirectBack: false,\n    redirectPath: (state, ownProps) =>\n        locationHelper.getRedirectQueryParam(ownProps) || '/',\n    authenticatingSelector: ({ firebase: { auth, isInitializing } }) =>\n        !auth.isLoaded || isInitializing === true,\n    authenticatedSelector: ({ firebase: { auth } }) =>\n        auth.isLoaded && auth.isEmpty,\n    /* redirectAction: newLoc => (dispatch) => {\n        browserHistory.replace(newLoc); // or routerActions.replace\n        dispatch({ type: 'UNAUTHED_REDIRECT' });\n    }, */\n});","import React from 'react'\n\n\nconst Clinica = () => {\n    return ( <h1>CLINICA</h1> );\n}\n \nexport default Clinica;","import React from 'react'\n\nconst Profesionales = () => {\n    return ( <h1>Profesionale</h1> );\n}\n \nexport default Profesionales;","import React from 'react'\n\nconst Servicios = () => {\n    return (<h1>Servicios</h1>);\n}\n\nexport default Servicios;","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\n// \nclass Navbar extends Component {\n    state = {\n        autenticado: false\n    }\n    //recibe props automáticamente desde compose\n    static getDerivedStateFromProps(props, state) {\n        const { auth } = props;\n        if (auth.uid)\n            return { autenticado: true }\n        else\n            return { autenticado: false }\n    }\n\n    cerrarSesion = () => {\n        const { firebase } = this.props;\n        firebase.logout();\n\n    }\n    render() {\n        const { autenticado } = this.state;\n        const { auth } = this.props;\n        return (\n\n            <nav className=\"navbar  navbar-expand-lg navbar-dark bg-primary\">\n                <nav className=\"navbar navbar-light\">\n                    <span className=\"navbar-brand mb-0 h1\">\n                        Clínica Sanis\n                        </span>\n                </nav>\n                <button     \n                    className=\"navbar-toggler\" \n                    type=\"button\" \n                    data-toggle=\"collapse\" \n                    data-target=\"#navbarColor01\" \n                    aria-controls=\"navbarColor01\" \n                    aria-expanded=\"false\" \n                    aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n                    {!autenticado ? null : (\n                        <Fragment>\n                            <ul className=\"navbar-nav mr-auto\">\n                                <li className=\"nav-item\">\n                                    <Link to={'/'} className=\"nav-link\">Clínica</Link>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <Link to={'/servicios'} className=\"nav-link\">Servicios</Link>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <Link to={'/profesionales'} className=\"nav-link\">Plantel Profesionales</Link>\n                                </li>\n                            </ul>\n                            <ul className=\"navbar-nav ml-auto\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#!\" className=\"nav-link\">{auth.email}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-toolbar\"\n                                        onClick={this.cerrarSesion}>\n                                        Logout\n                                    </button>\n                                </li>\n                            </ul>\n                        </Fragment>)\n                    }\n\n                </div>\n            </nav>\n\n        );\n    }\n}\n\nexport default compose(\n    firestoreConnect(),\n    connect((state, props) => ({\n        auth: state.firebase.auth\n    }))\n)(Navbar)","import React from 'react';\nimport Login from './components/auth/Login'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n//REDUX\n//STORE Y PROVIDER\nimport store from './REDUX/store';\nimport { Provider } from 'react-redux';\n\n//Para redirigir al usuario en función de si está autenticado\nimport { UserIsAuthenticated, UserIsNotAuthenticated } from './HELPERS/auth';\n\n//COMPONENTES\nimport Clinica from './components/Clinica';\nimport Profesionales from './components/Profesionales';\nimport Servicios from './components/Servicios';\n//NavBar\nimport Navbar from './components/LAYOUT/NavBar';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Navbar/>\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={UserIsNotAuthenticated(Clinica)}/>\n            <Route exact path=\"/servicios\" component={UserIsAuthenticated(Servicios)} />\n            <Route exact path=\"/profesionales\" component={UserIsAuthenticated(Profesionales)} />\n            <Route exact path=\"/login\" component={UserIsNotAuthenticated(Login)}/>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}